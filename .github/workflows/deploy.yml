name: Deploy to AWS

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PRODUCER: epl-producer
  ECR_REPOSITORY_CONSUMER: epl-consumer
  ECS_CLUSTER: epl-live-cluster
  ECS_SERVICE_PRODUCER: epl-producer-service
  ECS_SERVICE_CONSUMER: epl-consumer-service

jobs:
  # Test and lint
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install pytest flake8
          pip install -r services/producer/requirements.txt
          pip install -r services/consumer/requirements.txt

      - name: Run linting
        run: |
          flake8 services/producer/app --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 services/consumer/app --count --select=E9,F63,F7,F82 --show-source --statistics || true

  # Build and push Docker images
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push producer image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PRODUCER:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_PRODUCER:latest -f services/producer/Dockerfile services/producer
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PRODUCER:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PRODUCER:latest

      - name: Build, tag, and push consumer image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_CONSUMER:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_CONSUMER:latest -f services/consumer/Dockerfile services/consumer
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_CONSUMER:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_CONSUMER:latest

  # Deploy to ECS
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update ECS Producer Service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_PRODUCER }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Update ECS Consumer Service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE_CONSUMER }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for services to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_PRODUCER }} ${{ env.ECS_SERVICE_CONSUMER }} \
            --region ${{ env.AWS_REGION }}

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: echo "✅ Deployment successful!"

      - name: Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
